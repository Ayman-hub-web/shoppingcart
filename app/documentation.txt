Hier ist eine Dokumentation der Schritte in diesem Projekt:
1) zuerst wird eine frische Version für Laravel erstellt
2) composer create-project laravel/laravel example-app
3) In .env wird der DatabaseName eingetragen
4) Dann .. php artisan migrate.
5) install Jetstream
composer require laravel/jetstream
6) Install livewire or inertia
php artisan jetstream:install livewire
7) run npm install && npm run dev
8) Dann mache ich .. php artisan migrate
9) Das project läuft jetzt unter http://127.0.0.1:8000/
10) Ich registriere mich und loge ich mich ein
11) So dann wird ein model product erstellt mit allen was dazu gehört
12) php artisan make:model Product --all
13) Ruft man die migration und erweitert diese und einige Spalten
14) So gleichzeitig werden zufällige Daten für product erstellt mit Hilfe von Factory
15) Also gehe ich in database\factories\ProoductFactory und fügt man folgendes
public function definition()
    {
        return [
            'title' => $this->faker->sentence(6),
            'price' => $this->faker->numberBetween(50, 300),
            'image' => $this->faker->imageUrl($widt=640, $height=400, 'technics'),
        ];
    }

16) Dann .. composer dump-autoload
17) Dann kommen .. 
18) php artisan tinker
    Product::factory()->count(20)->create();
    
19) Wichtig bi diesem Projekt zu erwähnen ist die Benutzung vin Stripe payment um die Zahlung
    abzuwickeln. Hier arnbeite ikch nach dem Tutorial https://www.youtube.com/watch?v=tG03kmRn6uw&list=PLXgJ7cArk9uQ2MoHBqC2JuWmyPqdBUYkO&index=11
    Hier werden diese Schritte erklärt (unter github https://github.com/alzaabi98/shoppingCart-laravel). Dann kommt eine Bibliothek zum Einsatz
    unter der Adresse https://cartalyst.com/manual/stripe-laravel/13.x. So es werden mehrere Änderungen in
    verschiedenen Dateien vorgenommen wie es im Tutorial erklärt wird.

20) Wichtig auch in der Datei config/services mache ich eine Erweiterung 
    'stripe' => [
        'secret' => 'your-stripe-key-here', //hier kommt der Secret-Schlüssel von der Stripe-webseite
    ],
    Und das kommt unter den Klammern den secret Schlüssel unetr dem public Schlüssel auf der Seite
    https://dashboard.stripe.com/test/dashboard das ist die Seite von Stripe.com wo ich mich eingeloggt
    habe und dann aud dashboard sind diese Informationen.

21) Um alerts innerhalb des Projektes zu zeigen, benutze ich ein package https://github.com/realrashid/sweet-alert 
    und das kann man per composer einfpügen.

22) Um diese alerts benutzen zu können, gehen wir in den Controller, der für die angezeigten Seiten 
    zuständig ist und fügen wir in die Index-Methode folgt<.
    if(session('success')){
            toast(session('success'), 'success');
        }
    und so wenn man dann die Metode aufruft, bekommt man diese schöne alerts angezeigt.

23) Nach dem man die Zahlung abgewickelt hat, muss dieser Order in der Datenbank gespeichert werden.
24) Dazu wird ein Model Order erstellt mit migration und in ProductController wird dieser Order gespeichert.